plugins {
    id 'java'
    id 'checkstyle'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'application'
    id 'jacoco'
}

mainClassName = 'seedu.address.Main'

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

repositories {
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
}

checkstyle {
    toolVersion = '11.0.0'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}


task coverage(type: JacocoReport) {
    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)
    classDirectories.from files(sourceSets.main.output)
    executionData.from files(jacocoTestReport.executionData)
    afterEvaluate {
        classDirectories.from files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/*.jar'])
        })
    }
    reports {
        html.required = true
        xml.required = true
    }
}

dependencies {
    String jUnitVersion = '5.4.0'
    String javaFxVersion = '17.0.7'
    def os = org.gradle.internal.os.OperatingSystem.current()
    def arch = System.getProperty("os.arch")
    def platform
    if (os.isMacOsX()) {
        platform = (arch.contains("aarch64") || arch.contains("arm")) ? "mac-aarch64" : "mac"
    } else if (os.isLinux()) {
        platform = "linux"
    } else if (os.isWindows()) {
        platform = "win"
    } else {
        throw new GradleException("Unsupported OS for JavaFX: " + os)
    }

    implementation "org.openjfx:javafx-base:${javaFxVersion}:${platform}"
    implementation "org.openjfx:javafx-graphics:${javaFxVersion}:${platform}"
    implementation "org.openjfx:javafx-controls:${javaFxVersion}:${platform}"
    implementation "org.openjfx:javafx-fxml:${javaFxVersion}:${platform}"

    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.7.0'
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.7.4'

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: jUnitVersion

    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: jUnitVersion
}

shadowJar {
    archiveFileName = 'addressbook.jar'
}

defaultTasks 'clean', 'test'

run {
    jvmArgs "-Dprism.order=sw"
}
